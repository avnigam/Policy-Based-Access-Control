# -*- generated by 1.0.4 -*-
import da
PatternExpr_371 = da.pat.TuplePattern([da.pat.ConstantPattern('terminate')])
PatternExpr_836 = da.pat.TuplePattern([da.pat.ConstantPattern('read'), da.pat.FreePattern('cid'), da.pat.FreePattern('type'), da.pat.FreePattern('id')])
PatternExpr_845 = da.pat.FreePattern('Coordinator')
PatternExpr_932 = da.pat.TuplePattern([da.pat.ConstantPattern('write'), da.pat.FreePattern('cid'), da.pat.FreePattern('type'), da.pat.FreePattern('tuple')])
PatternExpr_941 = da.pat.FreePattern('Coordinator')
PatternExpr_376 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.FreePattern(None)]), da.pat.TuplePattern([da.pat.ConstantPattern('terminate')])])
_config_object = {}
import random
from configparser import ConfigParser
import time
import csv

class Database(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._DatabaseReceivedEvent_0 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_DatabaseReceivedEvent_0', PatternExpr_371, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_DatabaseReceivedEvent_1', PatternExpr_836, sources=[PatternExpr_845], destinations=None, timestamps=None, record_history=None, handlers=[self._Database_handler_835]), da.pat.EventPattern(da.pat.ReceivedEvent, '_DatabaseReceivedEvent_2', PatternExpr_932, sources=[PatternExpr_941], destinations=None, timestamps=None, record_history=None, handlers=[self._Database_handler_931])])

    def setup(self, coordinator_dict, config_file, **rest_1060):
        super().setup(coordinator_dict=coordinator_dict, config_file=config_file, **rest_1060)
        self._state.coordinator_dict = coordinator_dict
        self._state.config_file = config_file
        self.output('Setting up Database...')
        self._state.db_subject_file = ''
        self._state.db_resource_file = ''
        self._state.coordinator_dict = self._state.coordinator_dict
        self._state.list_subject = {a}
        self._state.list_resource = {}
        self._state.min_delay = 0
        self._state.max_delay = 0
        self._state.config_file = self._state.config_file

    def run(self):
        self.output('Database Process coming up...')
        self.get_configuration()
        self.load_data_xml()
        super()._label('_st_label_368', block=False)
        _st_label_368 = 0
        while (_st_label_368 == 0):
            _st_label_368 += 1
            if PatternExpr_376.match_iter(self._DatabaseReceivedEvent_0, SELF_ID=self._id):
                _st_label_368 += 1
            else:
                super()._label('_st_label_368', block=True)
                _st_label_368 -= 1
        self.output(('DB Subject Dump: ' + str(self._state.list_subject)))
        self.output(('DB Resource Dump: ' + str(self._state.list_resource)))
        self.output('Terminated DB Process...')

    def data_init(self, db_subject_file, db_resource_file):
        timestamp = int(time.time())
        subject = {}
        resource = {}
        with open(db_subject_file) as f:
            lines = f.readlines()
            for line in lines:
                row = line.rstrip().split(',')
                subject.update({row[0]: ([(row[1], timestamp)], [(row[2], timestamp)], [(row[3], timestamp)])})
        with open(db_resource_file) as f:
            lines = f.readlines()
            for line in lines:
                row = line.rstrip().split(',')
                resource.update({row[0]: ([(row[1], timestamp)], [(row[2], timestamp)], [(row[3], timestamp)])})
        return (subject, resource)

    def read_subject(self, s_id, timestamp):
        self.output(('Reading data from Database for Subject Id: ' + str(s_id)))
        row = self._state.list_subject[s_id]
        if (row is None):
            self._state.list_subject.update({s_id: ([('0', timestamp)], [(0, timestamp)], [(0, timestamp)])})
        (s_id, cust_type, status, history) = (s_id, row[1][0], row[2][0], row[3][0])
        return (s_id, cust_type, status, history)

    def read_resource(self, r_id, timestamp):
        self.output(('Reading data from Database for Resource Id: ' + str(r_id)))
        row = self._state.list_resource[r_id]
        if (row is None):
            self._state.list_resource.update({r_id: ([(0, timestamp)], [(0, timestamp)], [(0, timestamp)])})
        (r_id, balance, no_of_trans, last_trans) = (r_id, row[1][0], row[2][0], row[3][0])
        return (r_id, balance, no_of_trans, last_trans)

    def write_subject(self, record, timestamp):
        self.output(('Writing data into Database for Subject Record: ' + str(record)))
        (s_id, cust_type, status, history) = record
        current_record = self._state.list_subject[s_id]
        self.output('Update DB')
        if (current_record is None):
            self.output('No previous record')
            self._state.list_subject.update({s_id: ([('0', timestamp)], [(0, timestamp)], [(0, timestamp)])})
        else:
            self.output('Updating Current Record')
            if cust_type:
                current_record[0].append((cust_type, timestamp))
                sorted(current_record[0], key=(lambda tup: tup[1]), reverse=True)
            if status:
                current_record[1].append((status, timestamp))
                sorted(current_record[1], key=(lambda tup: tup[1]), reverse=True)
            if history:
                current_record[2].append((history, timestamp))
                sorted(current_record[2], key=(lambda tup: tup[1]), reverse=True)
            self._state.list_subject.update({s_id: (current_record[0], current_record[1], current_record[2])})

    def write_resource(self, record, timestamp):
        self.output(('Writing data into Database for Resource Record: ' + str(record)))
        (r_id, balance, no_of_trans, last_trans) = record
        current_record = self._state.list_resource[r_id]
        if (current_record is None):
            self._state.list_resource.update({r_id: ([(0, timestamp)], [(0, timestamp)], [(0, timestamp)])})
        else:
            if balance:
                current_record[0].append((balance, timestamp))
                current_record[0] = sorted(current_record[0], key=(lambda tup: tup[1]), reverse=True)
            if no_of_trans:
                current_record[1].append((no_of_trans, timestamp))
                current_record[1] = sorted(current_record[1], key=(lambda tup: tup[1]), reverse=True)
            if last_trans:
                current_record[2].append((last_trans, timestamp))
                current_record[2] = sorted(current_record[2], key=(lambda tup: tup[1]), reverse=True)
            self._state.list_resource.update({r_id: (current_record[0], current_record[1], current_record[2])})

    def get_configuration(self):
        self.output('Reading Configuration from properties file')
        config = ConfigParser()
        config.read(self._state.config_file)
        self._state.db_subject_file = config.get('DatabaseSection', 'db_subject_file')
        self._state.db_resource_file = config.get('DatabaseSection', 'db_resource_file')
        self._state.min_delay = int(config.get('DatabaseSection', 'min_db_latency'))
        self._state.max_delay = int(config.get('DatabaseSection', 'max_db_latency'))

    def load_data_xml(self):
        self.output('Initial Load to DB')
        (self._state.list_subject, self._state.list_resource) = self.data_init(self._state.db_subject_file, self._state.db_resource_file)
        self.output(('Database Data Subject Table : ' + str(self._state.list_subject)))
        self.output(('Database Data Resource Table : ' + str(self._state.list_resource)))

    def _Database_handler_835(self, cid, type, id, Coordinator):
        self.output(('Receiving database read request from Coordinator: ' + str(cid)))
        request_timestamp = int(time.time())
        if (type == 'subject'):
            data = self.read_subject(id, time.time())
        elif (type == 'resource'):
            data = self.read_resource(id, time.time())
        if (type == 'dump'):
            self.send(('dump_sent', (self._state.list_subject, self._state.list_resource)), to=self._state.coordinator_dict[cid])
        else:
            delay = random.randint(self._state.min_delay, self._state.max_delay)
            super()._label('_st_label_911', block=False)
            _st_label_911 = 0
            while (_st_label_911 == 0):
                _st_label_911 += 1
                if ((int(time.time()) - request_timestamp) > delay):
                    _st_label_911 += 1
                else:
                    super()._label('_st_label_911', block=True)
                    _st_label_911 -= 1
            self.send(('read_done', data), to=self._state.coordinator_dict[cid])
    _Database_handler_835._labels = None
    _Database_handler_835._notlabels = None

    def _Database_handler_931(self, cid, type, tuple, Coordinator):
        self.output(('Receiving database write request from Coordinator: ' + str(cid)))
        self.output(('Coordinator Dict: ' + str(self._state.coordinator_dict)))
        request_timestamp = int(time.time())
        if (type == 'subject'):
            self.write_subject(tuple, time.time())
        else:
            self.write_resource(tuple, time.time())
        self.send(('written',), to=self._state.coordinator_dict[cid])
    _Database_handler_931._labels = None
    _Database_handler_931._notlabels = None
