# -*- generated by 1.0.4 -*-
import da
PatternExpr_320 = da.pat.TuplePattern([da.pat.ConstantPattern('exhausted')])
PatternExpr_325 = da.pat.FreePattern('Client')
_config_object = {}
import sys
import os
import random
import subprocess
from configparser import ConfigParser
import time
import xml.etree.ElementTree as ET
Worker = da.import_da('Worker').Worker
Client = da.import_da('Client').Client
Coordinator = da.import_da('Coordinator').Coordinator
Database = da.import_da('Database').Database

class Master(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_MasterReceivedEvent_0', PatternExpr_320, sources=[PatternExpr_325], destinations=None, timestamps=None, record_history=None, handlers=[self._Master_handler_319])])

    def setup(self, master, config_file, client_list, coordinator_list, database, client_dict, coordinator_dict, **rest_683):
        super().setup(master=master, config_file=config_file, client_list=client_list, coordinator_list=coordinator_list, database=database, client_dict=client_dict, coordinator_dict=coordinator_dict, **rest_683)
        self._state.master = master
        self._state.config_file = config_file
        self._state.client_list = client_list
        self._state.coordinator_list = coordinator_list
        self._state.database = database
        self._state.client_dict = client_dict
        self._state.coordinator_dict = coordinator_dict
        self._state.master = self._state.master
        self._state.client_count = 0
        self._state.config_file = self._state.config_file
        self._state.client_list = self._state.client_list
        self._state.coordinator_list = self._state.coordinator_list
        self._state.database = self._state.database
        self._state.client_dict = self._state.client_dict
        self._state.coordinator_dict = self._state.coordinator_dict
        self.output('Master coming up...')

    def run(self):
        nclients = len(self._state.client_list)
        ncoordinators = len(self._state.coordinator_list)
        super()._label('_st_label_268', block=False)
        _st_label_268 = 0
        while (_st_label_268 == 0):
            _st_label_268 += 1
            if (self._state.client_count == nclients):
                _st_label_268 += 1
            else:
                super()._label('_st_label_268', block=True)
                _st_label_268 -= 1
        self.output('Terminating all processes')
        for i in range(nclients):
            self.send(('terminate',), to=self._state.client_dict[(i + 1)])
        for i in range(ncoordinators):
            self.send(('terminate',), to=self._state.coordinator_dict[(i + 1)])
        time.sleep(10)
        self.send(('terminate',), to=self._state.database)
        self.output('Terminated Master')

    def _Master_handler_319(self, Client):
        self.output(('I got the request for termiantion from Client' + str((self._state.client_count + 1))))
        self._state.client_count += 1
    _Master_handler_319._labels = None
    _Master_handler_319._notlabels = None

class Node_(da.NodeProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._events.extend([])

    def run(self):
        print('Starting Processes...')
        config = ConfigParser()
        config.read(sys.argv[1])
        print(config.sections())
        config_file = sys.argv[1]
        nclients = int(config.get('SystemConfiguration', 'no_of_clients'))
        ncoordinators = int(config.get('SystemConfiguration', 'no_of_coordinators'))
        nworkers = int(config.get('SystemConfiguration', 'no_of_workers_per_coordinator'))
        master = self.new(Master, arg=(), at='Master')
        self.output('Database coming up...')
        database = self.new(Database, arg=(), at='Database')
        self.output(('number of clients to be created..' + str(nclients)))
        client_dict = {}
        client_set = self.new(Client, num=nclients, at='Client')
        client_list = list(client_set)
        self.output(('number of clients...' + str(len(client_list))))
        self.output(client_list)
        for i in range(nclients):
            client_id = (i + 1)
            client_dict.update({client_id: client_list[i]})
        coordinator_dict = {}
        coordinator_list = []
        for i in range(ncoordinators):
            coordinator_id = (i + 1)
            node_name = ('Coordinator_' + str(coordinator_id))
            coordinator = self.new(Coordinator, arg=(), at=node_name)
            coordinator_list.append(coordinator)
            self.output(('Coordinators coming up...' + str(ncoordinators)))
            coordinator_dict.update({coordinator_id: coordinator})
        self._setup(master, (master, sys.argv[1], client_list, coordinator_list, database, client_dict, coordinator_dict))
        self._start(master)
        self._setup(database, (coordinator_dict, config_file))
        self._start(database)
        for i in range(len(client_list)):
            self._setup(client_list[i], ((i + 1), coordinator_dict, client_dict, master, config_file))
            self._start(client_list[i])
        for i in range(len(coordinator_list)):
            self.output(('Workers per Coordinators coming up...' + str(nworkers)))
            node_name = ('Coordinator_' + str((i + 1)))
            dedicated_workers_dict = {}
            dedicated_workers_list = []
            for w in range(nworkers):
                worker = self.new(Worker, arg=(), at=node_name)
                worker_id = w
                dedicated_workers_list.append(worker)
                dedicated_workers_dict.update({worker_id: worker})
            for j in range(len(dedicated_workers_list)):
                self._setup(dedicated_workers_list[j], (worker_id, coordinator_dict, client_dict, dedicated_workers_dict, config_file, database))
                self._start(dedicated_workers_list[j])
            self._setup(coordinator_list[i], ((i + 1), client_dict, coordinator_dict, database, ncoordinators, nworkers, dedicated_workers_dict, config_file))
            self._start(coordinator_list[i])
